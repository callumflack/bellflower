
/* ==================================================================

    MIXINS

   ================================================================== */


/**
* easy media queries
* @include bp(tablet) { â€¦ };
* http://css-tricks.com/conditional-media-query-mixins/
* See also: foundation, bootstrap, inuit
*/

@mixin bp($point) {
    @if $point == sm {
        @media (max-width: 480px) { @content; }
    }
    @else if $point == md-down {
        @media (max-width: 767px) { @content; }
    }
    @else if $point == md-up {
        @media (min-width: 768px) { @content; }
    }
    @else if $point == md-lg {
        @media (min-width: 768px) and (max-width: 1199px) { @content; }
    }
    @else if $point == lg {
        @media (min-width: 1200px) { @content; }
    }
    @else if $point == lg-up {
        @media (min-width: 1900px) { @content; }
    }
}

/**
 * Scut strip unit
 * http://davidtheclark.github.io/scut/strip-unit.html
 */

@function scut-strip-unit (
    $num
) {

    @return $num / ($num * 0 + 1);

}


/**
 * Scut px to rem
 * http://davidtheclark.github.io/scut/rem.html
 * Requires: `scut-strip-unit`.
 * Renamed rem() from scut-rem() for ease of use.
 */

$scut-rem-base: 16 !default;

@function rem (
    $pixels
) {

    $rem-vals: ();
    @each $val in $pixels {
        $val-in-rems: scut-strip-unit($val) / $scut-rem-base * 1rem;
        $rem-vals: append($rem-vals, $val-in-rems);
    }

    @if length($rem-vals) == 1 {
        // return a single value instead of a list,
        // so it can be used in calculations
        @return nth($rem-vals, 1);
    }
    @else {
        @return $rem-vals;
    }

}


/**
 * Scut rem fallback
 * http://davidtheclark.github.io/scut/rem-fallback.html
 * Requires: scut-rem and scut-strip-unit.
 * Renamed rem-fallback() from scut-rem-fallback() for ease of use.
 */

@mixin rem-fallback (
    $pixels,
    $property: font-size
) {

    $px-vals: null;
    @each $val in $pixels {
        $val-in-px: scut-strip-unit($val) * 1px;
        $px-vals: append($px-vals, $val-in-px);
    }
    $rem-vals: rem($pixels);

    #{$property}: $px-vals;
    #{$property}: $rem-vals;

}


/*
 * Scut font-face
 * http://davidtheclark.github.io/scut/font-face.html
 * Renamed font-face() from scut-font-face() for ease of use.
 */

@function main-src($formats, $file-path, $font-family) {
    // Return the list of `src` values, in order, that
    // a good `@font-face` will need, including only
    // those formats specified in the list `$formats`.
    $result: ();
    @if index($formats, eot) {
        $eot-val: url('#{$file-path}.eot?#iefix') format('embedded-opentype');
        $result: append($result, $eot-val, comma);
    }
    @if index($formats, woff) {
        $woff-val: url('#{$file-path}.woff') format('woff');
        $result: append($result, $woff-val, comma);
    }
    @if index($formats, ttf) {
        $ttf-val: url('#{$file-path}.ttf') format('truetype');
        $result: append($result, $ttf-val, comma);
    }
    @if index($formats, svg) {
        $svg-val: url('#{$file-path}.svg##{$font-family}') format('svg');
        $result: append($result, $svg-val, comma);
    }
    @return $result;
}

@mixin font-face (
    $font-family,
    $file-path,
    $weight: normal,
    $style: normal,
    $formats: eot woff ttf svg
) {

    @if index('italic' 'oblique', $weight) {
        $style: $weight;
        $weight: normal;
    }

    @font-face {
        font-family: $font-family;
        font-weight: $weight;
        font-style: $style;

        @if index($formats, eot) {
            src: url('#{$file-path}.eot');
        }
        src: main-src($formats, $file-path, $font-family);
    }

}



// Retina images
//
// Short retina mixin for setting background-image and -size

// .img-retina(@file-1x; @file-2x; @width-1x; @height-1x) {
//   background-image: url("@{file-1x}");

//   @media
//   only screen and (-webkit-min-device-pixel-ratio: 2),
//   only screen and (   min--moz-device-pixel-ratio: 2),
//   only screen and (     -o-min-device-pixel-ratio: 2/1),
//   only screen and (        min-device-pixel-ratio: 2),
//   only screen and (                min-resolution: 192dpi),
//   only screen and (                min-resolution: 2dppx) {
//     background-image: url("@{file-2x}");
//     background-size: @width-1x @height-1x;
//   }
// }

